import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.time.format.FormatStyle
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '2.1.6.RELEASE'
        logbackVersion = '1.2.3'
        swaggerVersion = '2.4.0'
        junitVersion = '5.6.0'
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'java'
    id 'idea'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

apply plugin: 'io.spring.dependency-management'

group = 'com.belum'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

def branch = System.getProperty("sourceBranch")

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

bootRun {
    String serverPort = System.getenv('SERVER_PORT')
    String environment = System.getenv('ENV')
    String logbackAppender = System.getenv('LOGBACK_APPENDER')
    String keyStorePw = System.getenv('KEYSTORE_PW')
    def appConfig = System.getProperty('app.config', "$projectDir/tmp/config")

    def logsDir = System.getProperty('logFilePath', "$projectDir/tmp/logs")
    File logsFolder = new File(logsDir)
    if(!logsFolder.exists()){ logsFolder.mkdirs()}

    File appConfigFolder = new File(appConfig)
    if(!logsFolder.exists()) { appConfigFolder.mkdirs()}

     jvmArgs = [
            "-Denvironment=$environment",
            "-Dlogging.config=classpath:logback-spring.xml",
            "-DlogFilePath=$logsDir",
            "-Dapp.config=$appConfig",
            "-Dserver.port=$serverPort",
            "-Dlogback.appender=$logbackAppender",
            "-Dwebapp.baseUrl=http://localhost:$serverPort/",
            "-Djavax.net.ssl.trustStore=$projectDir/security/api_truststore.jks",
            "-Djavax.net.ssl.keyStore=$projectDir/security/api_keystore.jks",
            "-Djavax.net.ssl.trustStorePassword=$keyStorePw",
            "-Djavax.net.ssl.KeyStorePassword=$keyStorePw"
    ]
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter:2.1.2.RELEASE'

    implementation "ch.qos.logback:logback-core:$logbackVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "ch.qos.logback:logback-access:$logbackVersion"

    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'com.auth0:java-jwt:3.8.1'
    implementation "io.springfox:springfox-swagger2:$swaggerVersion"
    implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    testImplementation 'com.github.fakemongo:fongo:2.1.0'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"

    // Only needed to run tests in a version of IntelliJ IDEA that bundles older versions
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.6.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junitVersion"
}

processResources {
    filter ReplaceTokens, tokens: [
        "application.version": version.toString(),
        "application.buildTimestamp": getDate(),
        "application.branch": branch.toString(),
    ]
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

static String getDate() {
    return ZonedDateTime.now().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM))
}